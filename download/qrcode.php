<?php

class QRCode {

    private $inputData = '';
    private $version = 6;
    private $ecclevel = 'Q';
    private $postionInfo = ['outLine' => 7, 'insideLine' => 5, 'centerPoint' => 3];

    public function __construct($data, $version = 6, $ecclevel = 'Q') {
        if ($version < 1 || $version > 40) {
            throw new Exception('QRCode Version Error');
        }
        if (!$this->getECCLevelIndex($eccLevel)) {
            throw new Exception('QRCode Error Correction Level Error');
        }
        $this->inputData = $data;
        $this->version = $version;
        $this->ecclevel = $ecclevel;
    }

    /**
     * 获取二维尺寸
     * 
     * @return int
     */
    public function getModulesSize() {
        return ($this->version - 1) * 4 + 21;
    }

    /**
     * 获取定位符信息
     * 
     * @return array
     */
    public function getAlignmentInfo() {
        if ($this->version == 1) {
            return 0;
        }

        $alignmentNumber = [1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 13, 13, 13, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22, 22, 33, 33, 33, 33, 33, 33, 33, 46, 46, 46, 46, 46, 46];

        $alignmentCoordinates3 = [18, 22, 26, 30, 34, 22, 24, 26, 28, 30, 32, 34, 26, 26, 26, 30, 30, 30, 34, 28, 26, 30, 28, 32, 30, 34, 26, 30, 26, 30, 34, 30, 34, 30, 24, 28, 32, 26, 30];
        $alignmentCoordinates = [6, $alignmentCoordinates3[$this->version - 2]];

        if ($this->version >= 7) {
            $alignmentCoordinates3 = [38, 42, 46, 50, 54, 58, 62, 46, 48, 50, 54, 56, 58, 62, 50, 50, 54, 54, 58, 58, 62, 50, 54, 52, 56, 60, 58, 62, 54, 50, 54, 58, 54, 58];
            $alignmentCoordinates[] = $alignmentCoordinates3[$this->version - 7];
        }
        if ($this->version >= 14) {
            $alignmentCoordinates4 = [66, 70, 74, 78, 82, 86, 90, 72, 74, 78, 80, 84, 86, 90, 74, 78, 78, 82, 86, 86, 90, 78, 76, 80, 84, 82, 86];
            $alignmentCoordinates[] = $alignmentCoordinates4[$this->version - 14];
        }

        if ($this->version >= 21) {
            $alignmentCoordinates5 = [94, 98, 102, 106, 110, 114, 118, 98, 102, 104, 108, 112, 114, 118, 102, 102, 106, 110, 110, 114];
            $alignmentCoordinates[] = $alignmentCoordinates5[$this->version - 21];
        }

        if ($this->version >= 28) {
            $alignment_number6 = [122, 126, 130, 134, 138, 142, 146, 126, 128, 132, 136, 138, 142];
            $alignmentCoordinates[] = $alignmentCoordinates6[$this->version - 28];
        }
        if ($this->version >= 35) {
            $alignment_number7 = [150, 154, 158, 162, 166, 170];
            $alignmentCoordinates[] = $alignmentCoordinates7[$this->version - 35];
        }
        return ['outLine' => 5, 'insideLine' => 3, 'centerPoint' => 1,
            'number' => $alignmentNumber[$this->version - 2],
            'coordinates' => $alignmentCoordinates];
    }

    /**
     * 获取数据模式代码
     * 
     * @param string $mode
     * @return string
     */
    public function getModeCode($mode) {
        $modeTable = ['eci' => '0111', 'numeric' => '0001', 'alphanumeric' => '0010', 'byte' => '0100', 'kanji' => '1000', 'chinese' => '1101', 'append' => '0011', 'fc1f' => '0101', 'fc1s' => '1001', 'end' => '0000'];
        return $modeTable[$mode];
    }

    public function getECCLevelIndex($eccLevel) {
        $eccTable = ['H' => 3, 'Q' => 2, 'M' => 1, 'L' => 0];
        if (isset($eccTable[$eccLevel])) {
            return $eccTable[$eccLevel];
        }
        return false;
    }

    /**
     * 字符左补零
     * 
     * @param int $str
     * @param int $len
     * @return string
     */
    public function padZeroLeft($str, $len) {
        return str_pad($str, $len, '0', STR_PAD_LEFT);
    }

    /**
     * 字符右补零
     * 
     * @param int $str
     * @param int $len
     * @return string
     */
    public function padZeroRight($str, $len) {
        return str_pad($str, $len, '0', STR_PAD_RIGHT);
    }

    /**
     * 转换数字模式为二进制串
     * 
     * @param string $numeric
     * @return string
     */
    public function encodeNumeric2Bin($numeric) {
        if ($this->version <= 9) {
            $bitLen = 10;
        } else if ($this->version <= 12) {
            $bitLen = 12;
        } else {
            $bitLen = 14;
        }
        $numericSplit = str_split($numeric, 3);
        $binString = '';
        $numericLen = strlen($numeric);
        for ($i = 0; $i < $numberLen; $i++) {
            $binByte = decbin($numeric[$i]);
            if ($i < $numberLen - 1) {
                $binString .= $this->padZeroLeft($binByte, $bitLen);
            } else {
                if (strlen($binByte) > 4) {
                    $binString .= $this->padZeroLeft($binByte, 7);
                } else {
                    $binString .= $this->padZeroLeft($binByte, 4);
                }
            }
        }
        $lenBinByte = $this->padZeroLeft(decbin($numericLen), $bitLen);
        return $this->getModeCode('numeric') . $lenBinByte . $binString . $this->getModeCode('end');
    }

    /**
     * 编码字母数字模式为二进制串
     * 
     * @param string $str
     * @return string
     */
    public function encodeAlphanumeric2Bin($str) {
        $alphanumericTable = array_merge(range(0, 9), range('A', 'Z'), str_split(' $%*+-./:', 1));

        if ($this->version <= 9) {
            $bitLen = 9;
        } else if ($this->version <= 12) {
            $bitLen = 11;
        } else {
            $bitLen = 13;
        }
        $strLen = strlen($str);
        $bitNumberSplitArr = array();
        $upstr = strtoupper($str);
        $k = 0;
        for ($i = 0; $i < $strLen; $i++) {
            $nowValue = array_search($upstr[$i], $alphanumericTable);
            if ($i % 2 == 1) {
                $binStr = decbin($bitNumberSplitArr[$k] * 45 + $nowValue, 10, 2);
                $bitNumberSplitArr[$k] = $this->padZeroLeft($binStr, 11);
                $k++;
            } elseif ($i % 2 == 0) {
                $bitNumberSplitArr[$k] = $nowValue;
                if ($i == $strLen - 1) {
                    $bitNumberSplitArr[$k] = $this->padZeroLeft($nowValue, 6);
                }
            }
        }

        return $this->getModeCode('alphanumeric') .
                $this->padZeroLeft(decbin($strLen), $bitLen) .
                implode($bitNumberSplitArr) . $this->getModeCode('end');
    }

    /**
     * 将二进制串补足8bit的倍数
     * 
     * @param string $str
     * @return string
     */
    public function padTo8bit($str) {
        $len = strlen($str);
        if ($len % 8 == 0) {
            return $str;
        }
        $len = $len + (8 - ($len % 8));
        return $this->padZeroRight($str, $len);
    }

    /**
     * 将二进制串补足容量
     * 
     * @param string $str
     * @return string
     */
    public function padBytes($str) {
        $num = $this->getCapacity() * 8;
        return str_pad($str, $num, '1110110000010001', STR_PAD_RIGHT);
    }

    /**
     * 获取容量尺寸,尺寸是codewords长度。1 codeword = 8bit
     * 
     * @return int
     */
    public function getCapacity() {
        $capacityTable = [
            9, 13, 16, 19,
            16, 22, 28, 34,
            26, 34, 44, 55,
            36, 48, 64, 80,
            46, 62, 86, 108,
            60, 76, 108, 136,
            66, 88, 124, 156,
            86, 110, 154, 194,
            100, 132, 182, 232,
            122, 154, 216, 274,
            140, 180, 254, 324,
            158, 206, 290, 370,
            180, 244, 334, 428,
            197, 261, 365, 461,
            223, 295, 415, 523,
            253, 325, 453, 589,
            283, 367, 507, 647,
            313, 397, 563, 721,
            341, 445, 627, 795,
            385, 485, 669, 861,
            406, 512, 714, 932,
            442, 568, 782, 1006,
            464, 614, 860, 1094,
            514, 664, 914, 1174,
            538, 718, 1000, 1276,
            596, 754, 1062, 1370,
            628, 808, 1128, 1468,
            661, 871, 1193, 1531,
            701, 911, 1267, 1631,
            745, 985, 1373, 1735,
            793, 1033, 1455, 1843,
            845, 1115, 1541, 1955,
            901, 1171, 1631, 2071,
            961, 1231, 1725, 2191,
            986, 1286, 1812, 2306,
            1054, 1354, 1914, 2434,
            1096, 1426, 1992, 2566,
            1142, 1502, 2102, 2702,
            1222, 1582, 2216, 2812,
            1276, 1666, 2334, 2956
        ];
        $index = ($this->version - 1) * 4 + (3 - $this->getECCLevelIndex($this->ecclevel));
        return $capacityTable[$index];
    }

    public function getNumericDataCapacity() {
        $capacityTable = [
            41, 34, 27, 17,
            77, 63, 48, 34,
            127, 101, 77, 58,
            187, 149, 111, 82,
            255, 202, 144, 106,
            322, 255, 178, 139,
            370, 293, 207, 154,
            461, 365, 259, 202,
            552, 432, 312, 235,
            652, 513, 364, 288,
            772, 604, 427, 331,
            883, 691, 489, 374,
            1022, 796, 580, 427,
            1101, 871, 621, 468,
            1250, 991, 703, 530,
            1408, 1082, 775, 602,
            1548, 1212, 876, 674,
            1725, 1346, 948, 746,
            1903, 1500, 1063, 813,
            2061, 1600, 1159, 919,
            2232, 1708, 1224, 969,
            2409, 1872, 1358, 1056,
            2620, 2059, 1468, 1108,
            2812, 2188, 1588, 1228,
            3057, 2395, 1718, 1286,
            3283, 2544, 1804, 1425,
            3517, 2701, 1933, 1501,
            3669, 2857, 2085, 1581,
            3909, 3035, 2181, 1677,
            4158, 3289, 2358, 1782,
            4417, 3486, 2473, 1897,
            4686, 3693, 2670, 2022,
            4965, 3909, 2805, 2157,
            5253, 4134, 2949, 2301,
            5529, 4343, 3081, 2361,
            5836, 4588, 3244, 2524,
            6153, 4775, 3417, 2625,
            6479, 5039, 3599, 2735,
            6743, 5313, 3791, 2927,
            7089, 5596, 3993, 3057
        ];
        $index = ($this->version - 1) * 4 + $this->getECCLevelIndex($this->ecclevel);
        return $capacityTable[$index];
    }

    public function getAlphanumericDataCapacity() {
        $capacityTable = [
            25, 20, 16, 10,
            47, 38, 29, 20,
            77, 61, 47, 35,
            114, 90, 67, 50,
            154, 122, 87, 64,
            195, 154, 108, 84,
            224, 178, 125, 93,
            279, 221, 157, 122,
            335, 262, 189, 143,
            395, 311, 221, 174,
            468, 366, 259, 200,
            535, 419, 296, 227,
            619, 483, 352, 259,
            667, 528, 376, 283,
            758, 600, 426, 321,
            854, 656, 470, 365,
            938, 734, 531, 408,
            1046, 816, 574, 452,
            1153, 909, 644, 493,
            1249, 970, 702, 557,
            1352, 1035, 742, 587,
            1460, 1134, 823, 640,
            1588, 1248, 890, 672,
            1704, 1326, 963, 744,
            1853, 1451, 1041, 779,
            1990, 1542, 1094, 864,
            2132, 1637, 1172, 910,
            2223, 1732, 1263, 958,
            2369, 1839, 1322, 1016,
            2520, 1994, 1429, 1080,
            2677, 2113, 1499, 1150,
            2840, 2238, 1618, 1226,
            3009, 2369, 1700, 1307,
            3183, 2506, 1787, 1394,
            3351, 2632, 1867, 1431,
            3537, 2780, 1966, 1530,
            3729, 2894, 2071, 1591,
            3927, 3054, 2181, 1658,
            4087, 3220, 2298, 1774,
            4296, 3391, 2420, 1852,
        ];
        $index = ($this->version - 1) * 4 + (3 - $this->getECCLevelIndex($this->ecclevel));
        return $capacityTable[$index];
    }

    public function getECCNumber($type = 'ecc') {
        $eccTable = [['L', 7, 1, [26, 19, 2]],
        ['M', 10, 1, [26, 16, 4]],
        ['Q', 13, 1, [26, 13, 6]],
        ['H', 17, 1, [26, 9, 8]],
        ['L', 10, 1, [44, 34, 4]],
        ['M', 16, 1, [44, 28, 8]],
        ['Q', 22, 1, [44, 22, 11]],
        ['H', 28, 1, [44, 16, 14]],
        ['L', 15, 1, [70, 55, 7]],
        ['M', 26, 1, [70, 44, 13]],
        ['Q', 36, 2, [35, 17, 9]],
        ['H', 44, 2, [35, 13, 11]],
        ['L', 20, 1, [100, 80, 10]],
        ['M', 36, 2, [50, 32, 9]],
        ['Q', 52, 2, [50, 24, 13]],
        ['H', 64, 4, [25, 9, 8]],
        ['L', 26, 1, [134, 108, 13]],
        ['M', 48, 2, [67, 43, 12]],
        ['Q', 72, 2, 2, [33, 15, 9], [34, 16, 9]],
        ['H', 88, 2, 2, [33, 11, 11], [34, 12, 11]],
        ['L', 36, 2, [86, 68, 9]],
        ['M', 64, 4, [43, 27, 8]],
        ['Q', 96, 4, [43, 19, 12]],
        ['H', 112, 4, [43, 15, 14]],
        ['L', 40, 2, [98, 78, 10]],
        ['M', 72, 4, [49, 31, 9]],
        ['Q', 108, 2, 4, [32, 14, 9], [33, 15, 9]],
        ['H', 130, 4, 1, [39, 13, 13], [40, 14, 13]],
        ['L', 48, 2, [121, 97, 12]],
        ['M', 88, 2, 2, [60, 38, 11], [61, 39, 11]],
        ['Q', 132, 4, 2, [40, 18, 11], [41, 19, 11]],
        ['H', 156, 4, 2, [40, 14, 13], [41, 15, 13]],
        ['L', 60, 2, [146, 116, 15]],
        ['M', 110, 3, 2, [58, 36, 11], [59, 37, 11]],
        ['Q', 160, 4, 4, [36, 16, 10], [37, 17, 10]],
        ['H', 192, 4, 4, [36, 12, 12], [37, 13, 12]],
        ['L', 72, 2, 2, [86, 68, 9], [87, 69, 9]],
        ['M', 130, 4, 1, [69, 43, 13], [70, 44, 13]],
        ['Q', 192, 6, 2, [43, 19, 12], [44, 20, 12]],
        ['H', 224, 6, 2, [43, 15, 14], [44, 16, 14]],
        ['L', 80, 4, [101, 81, 10]],
        ['M', 150, 1, 4, [80, 50, 15], [81, 51, 15]],
        ['Q', 224, 4, 4, [50, 22, 14], [51, 23, 14]],
        ['H', 264, 3, 8, [36, 12, 12], [37, 13, 12]],
        ['L', 96, 2, 2, [116, 92, 12], [117, 93, 12]],
        ['M', 176, 6, 2, [58, 36, 11], [59, 37, 11]],
        ['Q', 260, 4, 6, [46, 20, 13], [47, 21, 13]],
        ['H', 308, 7, 4, [42, 14, 14], [43, 15, 14]],
        ['L', 104, 4, [133, 107, 13]],
        ['M', 198, 8, 1, [59, 37, 11], [60, 38, 11]],
        ['Q', 288, 8, 4, [44, 20, 12], [45, 21, 12]],
        ['H', 352, 12, 4, [33, 11, 11], [34, 12, 11]],
        ['L', 120, 3, 1, [145, 115, 15], [146, 116, 15]],
        ['M', 216, 4, 5, [64, 40, 12], [65, 41, 12]],
        ['Q', 320, 11, 5, [36, 16, 10], [37, 17, 10]],
        ['H', 384, 11, 5, [36, 12, 12], [37, 13, 12]],
        ['L', 132, 5, 1, [109, 87, 11], [110, 88, 11]],
        ['M', 240, 5, 5, [65, 41, 12], [66, 42, 12]],
        ['Q', 360, 5, 7, [54, 24, 15], [55, 25, 15]],
        ['H', 432, 11, 7, [36, 12, 12], [37, 13, 12]],
        ['L', 144, 5, 1, [122, 98, 12], [123, 99, 12]],
        ['M', 280, 7, 3, [73, 45, 14], [74, 46, 14]],
        ['Q', 408, 15, 2, [43, 19, 12], [44, 20, 12]],
        ['H', 480, 3, 13, [45, 15, 15], [46, 16, 15]],
        ['L', 168, 1, 5, [135, 107, 14], [136, 108, 14]],
        ['M', 308, 10, 1, [74, 46, 14], [75, 47, 14]],
        ['Q', 448, 1, 15, [50, 22, 14], [51, 23, 14]],
        ['H', 532, 2, 17, [42, 14, 14], [43, 15, 14]],
        ['L', 180, 5, 1, [150, 120, 15], [151121, 15]],
        ['M', 338, 9, 4, [69, 43, 13], [70, 44, 13]],
        ['Q', 504, 17, 1, [50, 22, 14], [51, 23, 14]],
        ['H', 588, 2, 19, [42, 14, 14], [43, 15, 14]],
        ['L', 196, 3, 4, [141113, 14], [141114, 14]],
        ['M', 364, 3, 11, [70, 44, 13], [71, 45, 13]],
        ['Q', 546, 17, 4, [47, 21, 13], [48, 22, 13]],
        ['H', 650, 9, 16, [39, 13, 13], [40, 14, 13]],
        ['L', 224, 3, 5, [135, 107, 14], [136, 108, 14]],
        ['M', 416, 3, 13, [67, 41, 13], [68, 42, 13]],
        ['Q', 600, 15, 5, [54, 24, 15], [55, 25, 15]],
        ['H', 700, 15, 10, [43, 15, 14], [44, 16, 14]],
        ['L', 224, 4, 4, [144, 116, 14], [145, 117, 14]],
        ['M', 442, 17, [68, 42, 13]],
        ['Q', 644, 17, 6, [50, 22, 14], [51, 23, 14]],
        ['H', 750, 19, 6, [46, 16, 15], [47, 17, 15]],
        ['L', 252, 2, 7, [139, 111, 14], [140, 112, 14]],
        ['M', 476, 17, [74, 46, 14]],
        ['Q', 690, 7, 16, [54, 24, 15], [55, 25, 15]],
        ['H', 816, 34, [37, 13, 12]],
        ['L', 270, 4, 5, [151121, 15], [151122, 15]],
        ['M', 504, 4, 14, [75, 47, 14], [76, 48, 14]],
        ['Q', 750, 11, 14, [54, 24, 15], [55, 25, 15]],
        ['H', 900, 16, 14, [45, 15, 15], [46, 16, 15]],
        ['L', 300, 6, 4, [147, 117, 15], [148, 118, 15]],
        ['M', 560, 6, 14, [73, 45, 14], [74, 46, 14]],
        ['Q', 810, 11, 16, [54, 24, 15], [55, 25, 15]],
        ['H', 960, 30, 2, [46, 16, 15], [47, 17, 15]],
        ['L', 312, 8, 4, [131106, 13], [133, 107, 13]],
        ['M', 588, 8, 13, [75, 47, 14], [76, 48, 14]],
        ['Q', 870, 7, 22, [54, 24, 15], [55, 25, 15]],
        ['H', 1050, 22, 13, [45, 15, 15], [46, 16, 15]],
        ['L', 336, 10, 2, [141114, 14], [143, 115, 14]],
        ['M', 644, 19, 4, [74, 46, 14], [75, 47, 14]],
        ['Q', 952, 28, 6, [50, 22, 14], [51, 23, 14]],
        ['H', 1110, 33, 4, [46, 16, 15], [47, 17, 15]],
        ['L', 360, 8, 4, [151122, 15], [153, 123, 15]],
        ['M', 700, 22, 3, [73, 45, 14], [74, 46, 14]],
        ['Q', 1020, 8, 26, [53, 23, 15], [54, 24, 15]],
        ['H', 1200, 12, 28, [45, 15, 15], [46, 16, 15]],
        ['L', 390, 3, 10, [147, 117, 15], [148, 118, 15]],
        ['M', 728, 3, 23, [73, 45, 14], [74, 46, 14]],
        ['Q', 1050, 4, 31, [54, 24, 15], [55, 25, 15]],
        ['H', 1260, 11, 31, [45, 15, 15], [46, 16, 15]],
        ['L', 420, 7, 7, [146, 116, 15], [147, 117, 15]],
        ['M', 784, 21, 7, [73, 45, 14], [74, 46, 14]],
        ['Q', 1140, 1, 37, [53, 23, 15], [54, 24, 15]],
        ['H', 1350, 19, 26, [45, 15, 15], [46, 16, 15]],
        ['L', 450, 5, 10, [145, 115, 15], [146, 116, 15]],
        ['M', 812, 19, 10, [75, 47, 14], [76, 48, 14]],
        ['Q', 1200, 15, 25, [54, 24, 15], [55, 25, 15]],
        ['H', 1440, 23, 25, [45, 15, 15], [46, 16, 15]],
        ['L', 480, 13, 3, [145, 115, 15], [146, 116, 15]],
        ['M', 868, 2, 29, [74, 46, 14], [75, 47, 14]],
        ['Q', 1290, 42, 1, [54, 24, 15], [55, 25, 15]],
        ['H', 1530, 23, 28, [45, 15, 15], [46, 16, 15]],
        ['L', 510, 17, [145, 115, 15]],
        ['M', 924, 10, 23, [74, 46, 14], [75, 47, 14]],
        ['Q', 1350, 10, 35, [54, 24, 15], [55, 25, 15]],
        ['H', 1620, 19, 35, [45, 15, 15], [46, 16, 15]],
        ['L', 540, 17, 1, [145, 115, 15], [146, 116, 15]],
        ['M', 980, 14, 21, [74, 46, 14], [75, 47, 14]],
        ['Q', 1440, 29, 19, [54, 24, 15], [55, 25, 15]],
        ['H', 1710, 11, 46, [45, 15, 15], [46, 16, 15]],
        ['L', 570, 13, 6, [145, 115, 15], [146, 116, 15]],
        ['M', 1036, 14, 23, [74, 46, 14], [75, 47, 14]],
        ['Q', 1530, 44, 7, [54, 24, 15], [55, 25, 15]],
        ['H', 1800, 59, 1, [46, 16, 15], [47, 17, 15]],
        ['L', 570, 12, 7, [151121, 15], [151122, 15]],
        ['M', 1064, 12, 26, [75, 47, 14], [76, 48, 14]],
        ['Q', 1590, 39, 14, [54, 24, 15], [55, 25, 15]],
        ['H', 1890, 22, 41, [45, 15, 15], [46, 16, 15]],
        ['L', 600, 6, 14, [151121, 15], [151122, 15]],
        ['M', 1120, 6, 34, [75, 47, 14], [76, 48, 14]],
        ['Q', 1680, 46, 10, [54, 24, 15], [55, 25, 15]],
        ['H', 1980, 2, 64, [45, 15, 15], [46, 16, 15]],
        ['L', 630, 17, 4, [151122, 15], [153, 123, 15]],
        ['M', 1204, 29, 14, [74, 46, 14], [75, 47, 14]],
        ['Q', 1770, 49, 10, [54, 24, 15], [55, 25, 15]],
        ['H', 1100, 24, 46, [45, 15, 15], [46, 16, 15]],
        ['L', 660, 4, 18, [151122, 15], [153, 123, 15]],
        ['M', 1260, 13, 32, [74, 46, 14], [75, 47, 14]],
        ['Q', 1860, 48, 14, [54, 24, 15], [55, 25, 15]],
        ['H', 1220, 42, 32, [45, 15, 15], [46, 16, 15]],
        ['L', 720, 20, 4, [147, 117, 15], [148, 118, 15]],
        ['M', 1316, 40, 7, [75, 47, 14], [76, 48, 14]],
        ['Q', 1950, 43, 22, [54, 24, 15], [55, 25, 15]],
        ['H', 1310, 10, 67, [45, 15, 15], [46, 16, 15]],
        ['L', 750, 19, 6, [148, 118, 15], [149, 119, 15]],
        ['M', 1372, 18, 31, [75, 47, 14], [76, 48, 14]],
        ['Q', 1040, 34, 34, [54, 24, 15], [55, 25, 15]],
        ['H', 1430, 20, 61, [45, 15, 15], [46, 16, 15]]];
        $index = ($this->version-1) * 4 + $this->getECCLevelIndex($this->ecclevel);
        return $eccTable[$index];
    }

}
